---
title: The fastest way to work with arrays
description: How to make 500 JavaScript push-ups without making CPU wet.
tags:
  - Ninja tricks
  - JavaScript
---

Although my grandma liked to spend time feeding me sweets and telling lies about the fact that _all methods in V8 are equal_ in terms of performance, I knew that she was secretly hiding the truth of real JavaScript ninja techniques ü•∑üèª.

Even though the cake was delicious, it's important to know that _a true Saiyan always sprinkles when he tinkles_[^1], and the real ninja JavaScript always assumes that V8's mysterious engine was written by [triple agents](https://en.wikipedia.org/wiki/Double_agent#Triple_agent) who made their stuff so confusing just as a test of your intellectual superiority and endurance before you can truly enter the Ninja realm.

Imagine the situation where you want to have a workout array that contains all of your daily push-ups. And you do a lot of them. Like milions of them, and every push-up it's actually a pretty heavy-lifting for a memory.

The go-to approach by laydev would be something like this:

```js
const workout = [];

for (let i; i < 500; i++) {
  workout[i].push("push-up");
}
```

Pfff.... lame! Let's find a better, totally ninja-style, blazingly fast secret technique!

But first, we need to reveal the first truth about JavaScript's arrays.

## Empty array vs already filled array

Should you just create an empty workout array, or is it better to have it filled with empty slots ready to get sweatyüí¶?

The rule of thumb is that pushing that many elements to a completely empty array will be very slow. JavaScript generally prefers when the array is already populated, but let's actually test it:

```js
const workout_empty = [];

for (let i = 0; i < 500; i++) {
  workout_empty[i] = "push-up";
}
```

```js
const workout_slot_ready = ["empty-slot",...,"empty-slot"] // 500 slots

for (let i = 0; i < 500; i++) {
  workout_slot_ready[i] = "push-up";
}
```

> The results mark expectation. The slot_ready array is more than **3x faster**!
> | üèÜ Slot_ready | Empty |
> | :-: | :-: |
> | 2.4M ops/s | 754K ops/s |

## Quickest way to create filled array

So now we know that it's better to work with filled arrays, but how to create them quick? To find out let's set up the octagon for a fight between four opponents:

- old-style and cheerful Grandpa - `Array[i]`,
- well-known and widely respected - [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) method,
- new kid on the block but with a cool hairstyle - [`new Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array#array_constructor_with_a_single_parameter),
- the guy who wears underpants on the outside - [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).

Let's ask them to do 500 push-ups and see who will win in terms of performance.

```js
//  creating an empty array and filling it ol' style!
const workout = [];
for (let i = 0; i < 500; i++) {
  workout[i] = "empty-slot";
}
```

```js
//  creating an empty array and filling it up using a push
const workout = [];
for (let i = 0; i < 500; i++) {
  workout.push("empty-slot");
}
```

```js
// using Array's fill method to fill the array
const workout = new Array(500).fill("empty-slot", 0, 500);
```

```js
// using Array's static from method with an object literal
const workout = Array.from({ length: 500 }, () => "empty-slot");
```

> The results are interesting - `new Array().fill` is **1.2x faster** than `push` and then **19.5x faster** than `Array.from()` creep!
>
> <div aling="center">
>
> | üèÜ new Array().fill |   push()   | Array\[i\] | Array.from() |
> | :-----------------: | :--------: | :--------: | :----------: |
> |     546K ops/s      | 454K ops/s | 374K ops/s |  28k ops/s   |

> <div>

## Quickest way to insert element into array

So let's assume that our `workout` array is already blazingly-fast-ninja-style filled‚ö°

Now let's push some push-ups into the workout! By doing so, we need to approach a well-know JavaScript battleground of fight between `forEach` and `for` ‚öîÔ∏è.

```js
// imperative approach
for (let i = 0; i < 500; i++) {
  workout[i] = "push-up";
}
```

```js
// declarative approach
workout.forEach((_, i) => (workout[i] = "push-up"));
```

> This might cause some declarative devs to cry a little in the corner, but face the truth! Your fighting techniques are lame-o. Imperative 4 life with performance **2.2x faster** than declarative.
> | for | forEach|
> | :-: | :-:|
> | 2.2M ops/s | 1M ops/s |

## Final battle

Let's set up ground for a last perf battle: laydev technique vs ninja-style with shitload of push-ups üí™üèª!

```js
// üë¥üèª laydev style
const workout = [];

for (let i = 0; i < 10000000; i++) {
  workout.push("push-up");
}
```

```js
// ü•∑üèª ninja style
const workout = new Array(10000000).fill("empty-slot", 0, 10000000);

for (let i = 0; i < 10000000; i++) {
  workout[i] = "push-up";
}
```

> The results are just **awesome**! We are almost **5.5x faster**!
> | üèÜ Ninja styla | Lay style |
> | :-: | :-: |
> | 19 ops/s | 3.5 ops/s |

So next time when you set yourself up for a good ninja push-up training, remember the warm-up your workout with some `fill` method and use good ol' `for` loop.

<br>
<br>

<div align="center">
    <img src="../img/AnnoyScript_logo.svg"  alt="AnnoyScript logo" height="100" width="100"/>
</div>

<br>
<br>

[^1] RIP in peace [Akira Toriyama](https://www.youtube.com/watch?v=7pSmhZFbCy0).
